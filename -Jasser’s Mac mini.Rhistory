# Load the tips dataset
data(tips)
View(tips)
ggplot(data = tips, aes(x = total_bill, y = tip)) +
geom_point() +
geom_smooth(method = "lm")
# Install a library called UsingR
install.packages("UsingR")
# Load tidyverse
library(tidyverse)
library(UsingR)
data(father.son)
# Load the father.son dataset
data(father.son)
View(father.son)
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point()
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm") +
labs(
x = "Father's Height / Inches",
y = "Son's Height / Inches"
)
# Regression
lm(fheight ~ sheight, data=father.son)
# Regression
father.son.lm <- lm(fheight ~ sheight, data=father.son)
# Summary
summary(father.son.lm)
library(palmerpenguins)
data(penguins)
penguins <- penguins |> fill(everything())
cor(penguins$body_mass_g, penguins$flipper_length_mm)
library(GGally)
ggpairs(data = penguins, columns = c("body_mass_g", "flipeer_length_mm"))
ggpairs(data = penguins, columns = c("body_mass_g", "flipper_length_mm"))
ggplot(data = penguins, aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point()
ggplot(data = penguins, aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point() +
geom_smooth(method = "lm")
ggplot(data = penguins, aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point(aes(color = species)) +
geom_smooth(method = "lm")
ggplot(data = penguins, aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point(aes(color = species)) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 205, linetype=2)
ggplot(data = penguins, aes(x=body_mass_g, y=flipper_length_mm)) +
geom_point(aes(color = species)) +
geom_smooth(method = "lm") +
geom_hline(yintercept = 205, linetype=2) +
labs(
x = "Body Mass / G",
y = "Flipper Length / MM"
)
# Load the reshape2 package
library(reshape2)
# Load the tips dataset
data(tips)
ggplot(data = tips, aes(x=total_bill, y=tip)) +
geom_point() +
geom_smooth(method = "lm")
View(tips)
# Load the library tidyverse using the library() function
library(tidyverse)
penguins_torgerson <- penguins |> filter(island == "Torgerson")
View(penguins_torgerson)
penguins_torgerson <- penguins |> filter(island == "Torgersen")
ggplot(data = penguins_torgerson, aes(x=bill_length_mm, fill=sex)) +
geom_density(alpha=0.5)
p1 <- ggplot(data = penguins_torgerson, aes(x=bill_length_mm, fill=sex)) +
geom_density(alpha=0.5)
library(tidyverse)
?ggplotlyr
??ggplotlyr
library(UsingR)
data("father.son")
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
View(father.son)
ggplot(data = father.son) +
geom_density(aes(x=fheight))
ggplot(data = father.son) +
geom_density(aes(x=fheight, fill=fheight))
ggplot(data = father.son) +
geom_density(aes(x=fheight), fill=fheight)
ggplot(data = father.son) +
geom_density(aes(x=fheight), fill=fheight)
ggplot(data = father.son) +
geom_density(aes(x=fheight))  +
geom_density(aes(x=sheight))
ggplot(data = father.son) +
geom_density(aes(x=fheight))
ggplot(data = father.son) +
geom_density(aes(x=fheight))  +
geom_density(aes(x=sheight))
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
# T-Test for paired two sample
t.test(father.son$fheight, father.son$sheight, paired = TRUE)
library(reshape2)
library(GGally)
ggpairs(tips)
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex))
# Analyzing the variances of both distributions
tips |> group_by(sex) |> summarize(var(tip))
names(tips)
# Analyzing the variances of both distributions
tips |> group_by(sex) |> summarise(var(tip))
# Shapiro Test
tips |> filter(sex == "Male") |> pull(tip) |> shapiro.test()
shapiro.test(rnorm(30000))
shapiro.test(rnorm(3000))
tips |> filter(sex == "Female") |> pull(tip) |> shapiro.test()
# Both are not normal distribution so we use the anasari test
ansari.test(tip ~ sex, data = tips)
# T-Test with equal variance for both distributions
t.test(tip ~ sex, data=tips, var.equal = TRUE)
library(tidyverse)
library(UsingR)
data(father.son)
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point()
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
# T-Test on a paired two samples
t.test(father.son$fheight, father.son$sheight, paired=TRUE)
library(reshape2)
data(tips)
library(GGally)
ggpairs(tips)
ggplot(data = tips, aes(x=tip)) +
geom_historgram(aes(fill = sex))
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex))
# Check the variace of both distributions
# tips by males and tips by females
tips |> group_by(sex) |> summarise(var(tip))
# Using Shapiro test
tips |> filter(sex == "Male") |> pull(tip) |> shapiro_test()
# Using Shapiro test
tips |> filter(sex == "Male") |> pull(tip) |> shapiro.test()
shapiro.test(rnorm(3000))
# Test for female distribution
tips |> filter(sex == "Female") |> pull(tip) |> shapiro.test()
# Both are not normally distributed. We have to use ansari test
ansari.test(tip ~ sex, data=tips)
library(tidyverse)
library(UsingR)
data(father.son)
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point()
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
# T-Test on a paired two samples
t.test(father.son$fheight, father.son$sheight, paired=TRUE)
library(reshape2)
data(tips)
library(GGally)
ggpairs(tips)
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex))
tips |> group_by(sex) |> summarise(var(tip))
# From Males
tips |> filter(sex == "Male") |> pull(tip) |> shapiro.test()
shapiro.test(rnorm(3000))
# For Females
tips |> filter(sex == "Female") |> pull(tip) |> shapiro.test()
ansari.test(tip ~ sex, data=tips)
# Calculate the variance for both tip distribution by sex
tips |> group_by(sex) |> summarise(var(tip))
# For Males
tips |> filter(sex == "Male") |> pull(tip) |> shapiro.test()
# For Females
tips |> filter(sex == "Female") |> pull(tip) |> shapiro.test()
ansari.test(tip ~ sex, data=tips)
tips |> group_by(sex) |> summarise(mean(tip))
library(tidyverse)
library(UsingR)
data(father.son)
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point()
ggplot(data = father.son, aes(x=fheight, y=sheight)) +
geom_point() +
geom_smooth(method = "lm")
t.test(father.son$fheight, father.son$sheight, paired = TRUE)
library(reshape2)
data(tips)
library(GGally)
ggpairs(tips)
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex))
# Rookie data analyst answer
tips |> group_by(sex) |> summarise(mean(tip), var(tip))
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex), alpha=0.5)
ggplot(data = tips, aes(x=tip)) +
geom_histogram(aes(fill = sex))
tips |> filter(sex == "Male") |> pull(tip) |> shapiro.test()
shapiro.test(rnorm(3000))
shapiro.test(rnorm(3000))
shapiro.test(rnorm(3000))
shapiro.test(rnorm(3000))
# For Females
tips |> filter(sex == "Female") |> pull(tip) |> shapiro.test()
ansari.test(tip ~ sex, data = tips)
# Rookie data analyst answer
tips |> group_by(sex) |> summarise(mean(tip), var(tip))
ansari.test(tip ~ sex, data = tips)
ggplot(data = tips, aes(x=tip)) +
geom_density(aes(fill = sex), alpha=0.5)
plot(cars)
library(tidyverse)
data(penguins)
data(mpg)
names(mpg)
ggplot(data = mpg, aes(x=year, y=hwy)) +
geom_line()
hwy_year_group = mpg |> group_by(year) |> summarize(avg_hwy = mean(hwy))
hwy_year_group <- mpg |> group_by(year) |> summarize(avg_hwy = mean(hwy))
hwy_year_group <- mpg |> group_by(year) |> summarize(avg_hwy = mean(hwy))
hwy_year_group <- mpg |> group_by(year) |> summarise(avg_hwy = mean(hwy))
ggplot(data = hwy_year_group, aes(x=year, y=avg_hwy)) +
geom_line()
ggplot(data = mpg, aes(x=year, y=hwy)) +
geom_point()
# Load the tidyverse
library(tidyverse)
# Read the wine csv file
df <- read_csv("Week 12/winemag-data_first150k.csv")
# Head df
head(df)
# Filter country to be US
USdf <- df %>%
filter(country == "US")
# Head USdf
head(USdf)
# Check distinct values in province
USdf %>%
distinct(province)
# Load the US map
us_map <- map_data("state")
# Plot the US map to test it
ggplot() +
geom_polygon(data = us_map, aes(x=long, y=lat, group=group))
USdf <- USdf |>
select(state, points, price)
head(USdf)
names(us_map)
# Get the long, lat, group, region columns from us_map
us_map <- us_map |>
select(lon =long, lat, group, state = region)
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
coord_quickmap()
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf$state)
wine_map <- us_wine_map |>
left_join(USdf, by = "state")
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=price)) +
coord_quickmap()
wine_map <- us_wine_map |>
left_join(USdf, by = "state")
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf$state)
USdf <- USdf |>
select(state, points, price)
# We need to convert the province names in USdf into lower case
# to match the names in us_map
USdf <- USdf |>
mutate(state = tolower(province))
USdf <- USdf |>
select(state, points, price)
head(USdf)
names(us_map)
# Get the long, lat, group, region columns from us_map
us_map <- us_map |>
select(lon =long, lat, group, state = region)
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
coord_quickmap()
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf$state)
wine_map <- us_wine_map |>
left_join(USdf, by = "state")
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
coord_quickmap()
names(df)
View(df)
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=price)) +
coord_quickmap()
library(patchwork)
points + price
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=price)) +
coord_quickmap()
library(patchwork)
points + price
coord_quickmap()
coord_quickmap()
coord_quickmap()
library(patchwork)
points + price
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
labs(fill = "Points", x="", y="") +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=price)) +
labs(fill = "Price", x="", y="") +
coord_quickmap()
library(patchwork)
points + price
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
labs(fill = "Points", x="", y="", title='US Wine by Points') +
coord_quickmap()
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=points)) +
labs(fill = "Points", x="", y="", title="US Wine by Points") +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=price)) +
labs(fill = "Price", x="", y="", title="US Wine by Price") +
coord_quickmap()
library(patchwork)
points + price
# Correlation between price and points
ggplot(data = USdf |> filter(price < 100), aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Price",
y="Points",
olor="State",
title="Correlating Price and Points")
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Price",
y="Points",
color="State",
title="Correlating Price and Points")
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Price",
y="Points",
color="State",
title="Correlating Price and Points")
boxes <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_boxplot(aes(fill = state)) +
geom_point() +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_violin(aes(fill = state)) +
geom_point() +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
boxes + violins
boxes2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_boxplot(aes(fill = state)) +
geom_point() +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_violin(aes(fill = state)) +
geom_point() +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
boxes2 + violins2
(boxes + violins) / (boxes2 + violins2)
boxes <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_point() +
geom_boxplot(aes(fill = state)) +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
boxes + violins
boxes2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_boxplot(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
boxes2 + violins2
(boxes + violins) / (boxes2 + violins2)
# Load the US map
us_map <- map_data("state")
# Plot the US map to test it
ggplot() +
geom_polygon(data = us_map, aes(x=long, y=lat, group=group)) +
coord_quickmap()
