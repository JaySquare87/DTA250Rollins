# Get the long, lat, group, region columns from us_map
us_map <- us_map |>
select(lon =long, lat, group, state = region)
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
coord_quickmap()
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf$state)
wine_map <- us_wine_map |>
left_join(USdf, by = "state")
head(wine_map)
wine_map |> filter(state == "arizona") |> nrow()
us_wine_map |> filter(state == "arizona") |> nrow()
USdf |> filter(state == "arizona") |> nrow()
wine_map <- us_wine_map |>
left_join(USdf)
# Remove america from USdf
USdf <- USdf |>
filter(state != "america")
wine_map <- us_wine_map |>
left_join(USdf)
USdf |> filter(state == "america") |> nrow()
USdf <- USdf |>
select(state, points, price)
USdf |> filter(state == "america") |> nrow()
USdf
USdf |> distinct(state)
print(n = ...)
USdf |> distinct(state) |> print(n = ...)
USdf |> anti_join(us_wine_map)
USdf |> distinct(state) |> print(n = .Last.value)
# We need to convert the province names in USdf into lower case
# to match the names in us_map
USdf <- USdf |>
mutate(state = tolower(province))
# We need to convert the province names in USdf into lower case
# to match the names in us_map
USdf <- USdf |>
mutate(state = tolower(province))
# Filter country to be US
USdf <- df %>%
filter(country == "US")
# Head USdf
head(USdf)
# We need to convert the province names in USdf into lower case
# to match the names in us_map
USdf <- USdf |>
mutate(state = tolower(province))
USdf <- USdf |>
select(state, points, price)
USdf |> distinct(state)
USdf |> anti_join(us_wine_map)
USdf |> filter(state == "america")
USdf <- USdf |> filter(state != "america")
USdf |> anti_join(us_wine_map)
USdf <- USdf |> filter(state != "washington-oregon")
USdf |> anti_join(us_wine_map)
wine_map <- us_wine_map |>
left_join(USdf)
USdf |> anti_join(us_wine_map)
us_wine_map
USdf |> group_by(state) |> summarise(avg_point = mean(point), avg_price = mean(price))
USdf |> group_by(state) |> summarise(avg_point = mean(Point), avg_price = mean(Price))
names(USdf)
USdf |> group_by(state) |> summarise(avg_point = mean(points), avg_price = mean(price))
USdf |> group_by(state) |> summarise(avg_point = mean(points), avg_price = mean(price, na.rm=TRUE))
USdf_group <- USdf |> group_by(state) |> summarise(avg_point = mean(points), avg_price = mean(price, na.rm=TRUE))
us_wine_map |> left_join(USdf_group)
View(USdf)
wine_map <- us_wine_map |>
left_join(USdf_group)
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=avg_points)) +
labs(fill = "Points", x="", y="", title="US Wine by Points") +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=avg_price)) +
labs(fill = "Price", x="", y="", title="US Wine by Price") +
coord_quickmap()
library(patchwork)
points + price
points <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
labs(fill = "Points", x="", y="", title="US Wine by Points") +
coord_quickmap()
price <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = wine_map, aes(x=lon, y=lat, group=group, fill=avg_price)) +
labs(fill = "Price", x="", y="", title="US Wine by Price") +
coord_quickmap()
points + price
# Load the tidyverse
library(tidyverse)
# Read the wine csv file
df <- read_csv("Week 12/winemag-data_first150k.csv")
summary(df)
# Load the tidyverse library
library(tidyverse)
# Read the wine csv file
df <- read_csv("Week 12/winemag-data_first150k.csv")
# Filter country to be US
USdf <- df |>
filter(country == "US")
# Load the US map
us_map <- map_data("state")
# We need to convert the province names in USdf into lower case
# to match the names in us_map
USdf <- USdf |>
mutate(state = tolower(province))
# Get the state, point and price column from USdf
USdf <- USdf |>
select(state, points, price)
# Get the long, lat, group, region columns from us_map
us_map <- us_map |>
select(lon = long, lat, group, state = region)
# Group the states for a better performance
USdf_group <- USdf |> group_by(state) |>
summarise(avg_point = mean(points), avg_price = mean(price, na.rm=TRUE))
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf_group$state)
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap() +
scale_fill_gradient(low="yellow", high="red") +
theme_void()
View(us_wine_map)
# Create a subset of us_map where state is in USdf state
us_wine_map <- USdf_group |>
filter(state %in% USdf_group$state)
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap() +
scale_fill_gradient(low="yellow", high="red") +
theme_void()
# Group the states for a better performance
USdf_group <- USdf |> group_by(state) |>
summarise(avg_point = mean(points), avg_price = mean(price, na.rm=TRUE))
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf_group$state)
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf_group$state)
View(us_wine_map)
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group), color="black", fill="white") +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap() +
scale_fill_gradient(low="yellow", high="red") +
theme_void()
View(USdf_group)
# Create a subset of us_map where state is in USdf state
us_wine_map <- us_map |>
filter(state %in% USdf_group$state) |>
left_join(USdf_group)
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group), color="black", fill="white") +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap() +
scale_fill_gradient(low="yellow", high="red") +
theme_void()
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group), color="black", fill="white") +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap()
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group), color="black") +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap()
# Plot the US map with the average points
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap()
# Plot the US map with the average price
ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_price)) +
coord_quickmap()
# Load the patchwork library
library(patchwork)
# Plot the US map with the average points
points_plot <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap()
# Plot the US map with the average price
price_plot <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_price)) +
coord_quickmap()
# Combine the two plots together
points_plot + price_plot
# Plot the US map with the average points
points_plot <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_point)) +
coord_quickmap() +
labs(title = "US Wine by Points", x="", y="")
# Plot the US map with the average price
price_plot <- ggplot() +
geom_polygon(data = us_map, aes(x=lon, y=lat, group=group)) +
geom_polygon(data = us_wine_map, aes(x=lon, y=lat, group=group, fill=avg_price)) +
coord_quickmap() +
labs(title = "US Wine by Price", x="", y="")
# Combine the two plots together
points_plot + price_plot
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm", se = FALSE) +
labs(x = "Price",
y="Points",
color="State",
title="Correlating Price and Points")
ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=price, y=points)) +
geom_point(aes(color = state)) +
geom_smooth(method = "lm") +
labs(x = "Price",
y="Points",
color="State",
title="Correlating Price and Points")
(boxes + violins) / (boxes2 + violins2)
boxes <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_point() +
geom_boxplot(aes(fill = state)) +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=price)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Price of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
boxes + violins
boxes2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_boxplot(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
violins2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Price",
fill = "State"
)
(boxes + violins) / (boxes2 + violins2)
boxes2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_boxplot(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Point",
fill = "State"
)
violins2 <- ggplot(data = USdf |>
filter(state %in% c("california", "oregon", "washington") &
price < 100),
aes(x=state, y=points)) +
geom_point() +
geom_violin(aes(fill = state)) +
labs(
title = "Points of wine in California, Oregon and Washington",
x = "State",
y = "Point",
fill = "State"
)
(boxes + violins) / (boxes2 + violins2)
# Load the tidyverse package
library(tidyverse)
# Load the maps package
library(maps)
# Load the us.cities dataset
data(us.cities)
# Define a function that takes a state name and abbreviation as input
# and plots the cities in that state, with point size proportional to population
plot_state_cities <- function(state_name, state_abbr) {
# Load the us.cities data
# Filter the data to only include cities in the specified state
# The column name for the state in this dataset is country.etc
# Always check the column names of a dataset before using it
# Select the name, lon, lat, and pop columns
# Store the data in a variable named state_cities
state_cities <- us.cities |>
filter(country.etc == state_abbr) |>
select(name, lon = long, lat, pop)
# Load the county data for the specified state
# From that data select() the lon, lat, group, and subregion columns
# Rename the long column to lon and the subregion column to county
# Store the data in a variable named state_counties
state_counties <- map_data("county", state_name) |>
select(lon = long, lat, group, county = subregion)
# Plot the data in state_cities using ggplot()
# Use aes() to set the x-axis to lon and the y-axis to lat
# Use geom_polygon() to plot the county data
# Use geom_point() to plot the data
# Inside geom_point() use aes() to set the size parameter to pop
# Use scale_size_area() to set the size of the points
# Use coord_quickmap() to set the coordinate system
ggplot(data = state_cities, aes(x = lon, y = lat)) +
geom_polygon(
aes(group = group),
state_counties,
fill = NA,
color = "grey50"
) +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap() +
labs(title = paste("Cities in", state_name))
}
# Example usage: plot cities in Florida
plot_state_cities("florida", "FL")
# Another example: plot cities in California
plot_state_cities("california", "CA")
# Define a function that takes a state name, state abbreviation, and population range as input
# and plots the cities in that state within the specified population range, with point size proportional to population
plot_state_cities_range <- function(state_name, state_abbr, pop_range) {
# Load the us.cities data
# Filter the data to only include cities in the specified state
# The column name for the state in this dataset is country.etc
# Always check the column names of a dataset before using it
# Select the name, lon, lat, and pop columns
# Filter the data to only include cities within the specified population range
# Store the data in a variable named state_cities
state_cities <- us.cities |>
filter(country.etc == state_abbr) |>
select(name, lon = long, lat, pop) |>
filter(pop >= pop_range[1] & pop <= pop_range[2])
# Load the county data for the specified state
# From that data select() the lon, lat, group, and subregion columns
# Rename the long column to lon and the subregion column to county
# Store the data in a variable named state_counties
state_counties <- map_data("county", state_name) |>
select(lon = long, lat, group, county = subregion)
# Plot the data in state_cities using ggplot()
# Use aes() to set the x-axis to lon and the y-axis to lat
# Use geom_polygon() to plot the county data
# Use geom_point() to plot the data
# Inside geom_point() use aes() to set the size parameter to pop
# Use scale_size_area() to set the size of the points
# Use coord_quickmap() to set the coordinate system
ggplot(data = state_cities, aes(x = lon, y = lat)) +
geom_polygon(
aes(group = group),
state_counties,
fill = NA,
color = "grey50"
) +
geom_point(aes(size = pop)) +
scale_size_area() +
coord_quickmap() +
labs(title = paste("Cities in", state_name, "with population between", pop_range[1], "and", pop_range[2]))
}
# Example usage: plot cities in Florida with population between 100000 and 500000
plot_state_cities_range("florida", "FL", c(100000, 500000))
# Another example: plot cities in California with population between 100000 and 500000
plot_state_cities_range("california", "CA", c(100000, 500000))
install.packages("gradeR")
library(gradeR)
install.packages("testthat")
install.packages("usethis")
library(usethis)
library(testthat)
test_that("1.1a", {
expect_true(a == 3)
})
library(testthat)
library(gradeR)
submissionDir <- "../gradeR/"
grades <- calcGrades(submission_dir = submissionDir,
test_file = "JaneDoe.R")
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "JaneDoe.R")
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "/gradeR/JaneDoe.R")
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/JaneDoe.R")
library(gradeR)
submissionDir <- "../gradeR/"
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/JaneDoe.R")
View(grades)
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
View(grades)
submissionDir <- "./gradeR/"
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
View(grades)
View(grades)
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
View(grades)
submissionDir <- "./gradeR/submissions"
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
submissionDir <- "./gradeR/submissions/"
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
View(grades)
library(testthat)
library(gradeR)
submissionDir <- "./gradeR/submissions/"
grades <- calcGrades(submission_dir = submissionDir,
your_test_file = "./gradeR/gradeTest.R")
View(grades)
gc()
1|0
gc()
# Load the tidyverse
library(tidyverse)
# Load the billboard dataset
data("billboard")
# TODO
# Apply the pivot_longer() function on all columns that starts with "wk".
# Set the name_to parameter to "week", and the values_to parameter to "rank"
billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank"
)
View(billboard)
# TODO
# Repeat the last TODO
# However, this time remove missing values
# Set the values_drop_na to TRUE.
billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
)
# TODO
# Repeat the last TODO
# However, this time save the results into a data frame called billboard_longer
# After pivot_longer, mutate the "week" column so that it only contains that
# number of the week only. Use the mutate() function.
# Use the parse_number() function to get the number of the week only
billboard_longer <- billboard |>
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) |>
mutate(
week = parse_number(week)
)
View(billboard_longer)
View(billboard_longer)
billboard_longer |> filter(artist == "Daft Punk")
