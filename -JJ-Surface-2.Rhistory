firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
View(firstList)
View(secondList)
sum_all <- function(x, y) {
return(sum(x, y))
}
map2(firstList, secondList, sum_all)
map2(firstList, secondList, sum_all)
sum_all <- function(x, y) {
return(sum(x, y))
}
map2(firstList, secondList, sum_all)
#TODO
# Assume you have the following two lists
firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
pmap(list(firstList, secondList), sum_all)
class(diamonds)
library(dplyr)
diamonds %>% filter(cara > 2)
diamonds %>% filter(carat > 2)
diamonds %>% filter(carat > 2) %>% summarize(mean(price), mean(depth))
diamonds %>% filter(carat > 2) %>% select(price, depth) %>% map_dbl(mean)
#TODO
# Remember the following list
theList <- list(A=matrix(1:9, 3), B=1:5, C=matrix(1:4, 2), D=2)
View(theList)
lapply(theList, sum)
library(purrr)
theList %>% map(sum)
is.matrix(theList[[1]])
theList %>% map(is.matrix)
theList %>% map_lgl(is.matrix)
View(theList)
theList[["A"]]
theList
View(theList)
theList %>% map_int(length)
theList %>% map_dbl(length)
theList %>% map_dbl(mean)
theList %>% map_int(mean)
class(theList[[1]])
theList %>% map_chr(class)
theList %>% map(class)
paste("JJ", "is a professor")
# Nevertheless, here is code that would work with map_chr()
theList %>% map_chr(function(x) paste(class(x), collapse = ", "))
data(diamonds, package = "ggplot2")
diamonds %>% map(mean)
View(diamonds)
diamonds %>% map_dbl(mean)
#TODO
# Assume you have the following two lists
firstList <- list(A=matrix(1:16, 4), B=matrix(1:16, 2), C=1:5)
secondList <- list(A=matrix(1:16, 4), B=matrix(1:16, 8), C=15:1)
sum_all <- function(x) {
return(sum(x, y))
}
View(firstList)
View(secondList)
secondList[["B"]]
map2(firstList, secondList, sum_all)
sum_all <- function(x, y) {
return(sum(x, y))
}
map2(firstList, secondList, sum_all)
pmap(list(firstList, secondList), sum_all)
class(diamonds)
library(dplyr)
diamonds %>% filter(carat > 2)
diamonds %>% filter(carat > 2) %>% summarize(mean(price), mean(depth))
diamonds %>% filter(carat > 2) %>% select(price, depth) %>% map(mean)
diamonds %>% filter(carat > 2) %>% select(price, depth) %>% map_dbl(mean)
library(palmerpenguins)
data("penguins")
View(penguins)
library(dplyr)
penguins %>% group_by(species) %>% summarize(mean(bill_length_mm))
penguins %>% summarize(mean(bill_length_mm))
View(penguins)
penguins %>% summarize(mean(bill_length_mm, na.rm = TRUE))
penguins %>% group_by(species) %>% summarize(mean(bill_length_mm, na.rm = TRUE))
penguins %>% group_by(island) %>% summarize(mean(body_mass))
penguins %>% group_by(island) %>% summarize(mean(body_mass_g))
penguins %>% group_by(island) %>% summarize(mean(body_mass_g, na.rm = TRUE))
View(penguins)
View(penguins)
View(penguins)
library(ggplot2)
data(diamonds)
diamonds %>% filter(cut == "Ideal" & carat < 1)
diamonds %>% filter(cut == "Ideal", carat < 1)
diamonds %>% filter(cut == "Ideal" | carat < 1)
diamonds %>% filter(cut == "Ideal" & carat < 1)
diamonds %>%
filter(cut == "Ideal" & carat < 1) %>%
group_by(clarity) %>%
summarize(mean(price))
class(penguins)
class(diamonds)
library(data.table)
diamonds_dt <- data.table(diamonds)
class(diamonds_dt)
diamonds_dt[.(cut == "Ideal" & carat < 1), mean(price), by=clarity]
diamonds_dt[.(cut == "Ideal", carat < 1), mean(price), by=clarity]
diamonds_dt[cut == "Ideal" & carat < 1, mean(price), by=clarity]
discount_evaluator <- function(x) {
if (x > 500) {
return(x * 20 / 100)
}
else if (x >= 300 & x <= 500) {
return(x * 15 / 100)
}
else if (x >= 100 & x <= 299) {
return(x * 10 /100)
}
else if (x >= 50 & x <= 99) {
return(x * 5 / 100)
}
else {
return(x)
}
}
discount_evaluator(501)
discount_evaluator(499)
discount_evaluator(200)
discount_evaluator(78)
discount_evaluator(46)
discount_evaluator(501)
discount_evaluator(46)
discount_evaluator <- function(x) {
if (x > 500) {
return(x * 20 / 100)
}
else if (x >= 300 & x <= 500) {
return(x * 15 / 100)
}
else if (x >= 100 & x <= 299) {
return(x * 10 /100)
}
else if (x >= 50 & x <= 99) {
return(x * 5 / 100)
}
else {
return(0)
}
}
discount_evaluator(46)
discount_evaluator <- function(purchase) {}
discount_evaluator <- function(purchase) {
if (purchase > 500) {
purchase * 20/100
}
else if (purchase >= 300 & purchase <= 500) {
purchase * 15/100
}
else if (purchase >= 100 & purchase <= 299) {
purchase * 10/100
}
else if (purchase >= 50 & purchase <= 99) {
purchase * 5 / 100
}
else {
0
}
}
discount_evaluator(50)
discount_evaluator(501)
discount_evaluator(450)
discount_evaluator(250)
discount_evaluator(55)
discount_evaluator(5)
library(ggplot2)
data(diamonds)
library(dplyr)
diamonds %>% filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5)
diamonds %>%
filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5) %>%
group_by(color) %>%
summarize(mean(price), max(carat))
class(diamonds)
library(data.table)
diamonds_dt <- data.table(diamonds)
class(diamonds_dt)
diamonds_dt[
cut == "Premium" & carat >= 0.3 & carat <= 1.5,
.(mean(price), max(carat)),
by=color
]
diamonds %>% filter(cut == "Ideal" & carat < 1)
diamonds %>% filter(cut == "Ideal" & carat < 1) %>%
group_by(clarity) %>% summarize(mean(price))
diamonds_dt[cut == "Ideal" & carat < 1, mean(price), by=clarity]
discount_evaluator <- function(purchase) {
if (purchase > 500) {
purchase * 20/100
}
else if (purchase >= 300 & purchase <= 500) {
purchase * 15/100
}
else if (purchase >= 100 & purchase <= 299) {
purchase * 10/100
}
else if (purchase >= 50 & purchase <= 99) {
purchase * 5/100
}
else {
0
}
}
discount_evaluator(501)
discount_evaluator(499)
discount_evaluator(199)
discount_evaluator(99)
discount_evaluator(9)
library(ggplot2)
data(diamonds)
library(dplyr)
View(diamonds)
View(diamonds)
summarize(mean(price), count(color))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(depth) %>%
summarize(mean(price), count(color))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(depth) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(depth) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(color) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(color) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good", clarity == "VS2") %>%
group_by(color) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good" | clarity == "VS2") %>%
group_by(color) %>%
summarize(mean(price))
diamonds %>%
filter(cut == "Very Good" & clarity == "VS2") %>%
group_by(color) %>%
summarize(mean(price))
class(diamonds)
library(data.table)
diamonds_dt <- data.table(diamonds)
class(diamonds_dt)
diamonds_dt[cut == "Very Good" & clarity == "VS2", mean(price), by=color]
diamonds
diamonds %>% filter(cut == "Ideal" & carat < 1) %>%
group_by(clarity) %>% summarize(mean(price))
diamonds_dt[cut == "Ideal" & carat < 1, mean(price), by=clarity]
discount_evaluator <- function(purchase) {
if (purchase > 500) {
purchase * 20/100
}
else if (purchase >= 300 & purchase <= 500) {
purchase * 15/100
}
else if (purchase >= 100 & purchase <= 299) {
purchase * 10/100
}
else if (purchase >= 50 & purchase <= 99) {
purchase * 5/100
}
else {
0
}
}
discount_evaluator(501)
discount_evaluator(499)
discount_evaluator(199)
discount_evaluator(99)
discount_evaluator(9)
library(ggplot2)
data(diamonds)
diamonds
library(dplyr)
diamonds %>%
filter(cut == "Premium")
diamonds %>%
filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5)
diamonds %>%
filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5) %>%
group_by(color)
diamonds %>%
filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5) %>%
group_by(color) %>%
summarize(mean(price), max(carat_size))
diamonds %>%
filter(cut == "Premium" & carat >= 0.3 & carat <= 1.5) %>%
group_by(color) %>%
summarize(mean(price), max(carat))
class(diamonds)
library(data.table)
diamonds_dt <- data.table(diamonds)
class(diamonds_dt)
diamonds_dt[
cut == "Premium" & carat >= 0.3 & carat <= 1.5,
.(mean(price), max(carat)),
by=color
]
diamonds_dt[
cut == "Premium" & carat >= 0.3 & carat <= 1.5,
.(avg_price = mean(price), max_carat = max(carat)),
by=color
]
diamonds %>% filter(cut == "Ideal" & carat < 1) %>%
group_by(clarity) %>% summarize(mean(price))
diamonds_dt[
cut == "Ideal" & carat < 1,
]
diamonds_dt[
cut == "Ideal" & carat < 1,
mean(price),
by=clarity
]
diamonds_dt[
cut == "Ideal" & carat < 1,
.(avg_price = mean(price)),
by=clarity
]
diamonds_dt[
cut == "Ideal" & carat < 1, # i section
.(avg_price = mean(price)), # j section
by=clarity # by section
]
library(dplyr)
install.packages("tidyverse")
library(dplur)
library(dplyr)
library(nycflights13)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
flights |> filter(!is.na(dep_delay))
flights |> select(year, month, dep_time, dep_delay) |> filter(!is.na(dep_delay))
flights |> filter(!is.na(dep_delay) & !is.na(arr_delay))
not_cancelled <- flights |>
filter(!is.na(dep_delay) & !is.na(arr_delay))
not_cancelled
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay))
not_cancelled |>
group_by(year, month, day) |>
summarize(mean = mean(dep_delay)) |>
arrange(desc(mean))
not_cancelled |> mutate(date = as.Date(paste(year, month, day, sep="-"))
)
not_cancelled |> mutate(date = as.Date(paste(year, month, day, sep="-")))
not_cancelled|> select(date) |> mutate(date = as.Date(paste(year, month, day, sep="-")))
not_cancelled|> mutate(date = as.Date(paste(year, month, day, sep="-"))) |> select(date)
not_cancelled |<> mutate(date = as.Date(paste(year, month, day, sep="-")))
not_cancelled <- not_cancelled |> mutate(date = as.Date(paste(year, month, day, sep="-")))
not_cancelled |> select(date)
not_cancelled |> group_by(date) |> summarize(mean(dep_delay))
not_cancelled |> group_by(date) |> summarize(mean(dep_delay)) |> arrange(desc(dep_delay))
not_cancelled |> group_by(date) |> summarize(mean = mean(dep_delay)) |> arrange(desc(mean))
avg_dep_delay |> group_by(date) |> summarize(mean = mean(dep_delay))
avg_dep_delay <- not_cancelled |> group_by(date) |> summarize(mean = mean(dep_delay))
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_line()
library(ggplot2)
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_line()
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_smooth()
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_line()
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_line() + geom_point()
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_bar()
ggplot(data = avg_dep_delay, aes(x=date, y=mean)) +
geom_line() + geom_point()
not_cancelled |> group_by(month) |> summarize(mean = mean(dep_delay)) |> arrange(desc(mean))
avg_delay_moth <- not_cancelled |> group_by(month) |> summarize(mean = mean(dep_delay)
)
ggplot(data = avg_delay_moth, aes(x=month, y=mean)) +
geom_line() +
geom_point()
ggplot(data = avg_delay_moth, aes(x=month, y=mean)) +
geom_bar()
ggplot(data = avg_delay_moth, aes(y=mean)) +
geom_bar()
ggplot(data = avg_delay_moth, aes(x=mean)) +
geom_bar()
ggplot(data = avg_delay_moth, aes(x=month, y=mean)) +
geom_line() +
geom_point()
avg_delay_moth |> mutate(month_factor = factor(month))
avg_delay_month <- avg_delay_moth |> mutate(month_factor = factor(month))
ggplot(data = avg_delay_moth, aes(x=month_factor, y=mean)) +
geom_line() +
geom_point()
avg_month_delay
avg_delay_month
ggplot(data = avg_delay_moth, aes(x=month_factor, y=mean)) +
geom_line() +
geom_point()
ggplot(data = avg_delay_moth, aes(x=month_factor, y=mean)) +
geom_bar()
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean) +
geom_point()
)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_point()
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_bar()
ggplot(data = avg_delay_month, aes(y=mean)) +
geom_bar()
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_point() + geom_line()
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col()
avg_delay_month |> mutate(
season = ifelse(month_factor %in% c(1,2,12), 'Winter', ifelse(month_factor %in% c(3:5), 'Spring', ifelse(month_factor %in% c(6:8), "Summer", ifelse(month_factor %in% c(9:11), "Fall", NA))))
)
avg_delay_month <- avg_delay_month |> mutate(
season = ifelse(month_factor %in% c(1,2,12), 'Winter', ifelse(month_factor %in% c(3:5), 'Spring', ifelse(month_factor %in% c(6:8), "Summer", ifelse(month_factor %in% c(9:11), "Fall", NA))))
)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(color=season)
avg_delay_month
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(color=season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(color(season))
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(color=season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(fill=season)
avg_delay_month <- avg_delay_month |> mutate(season_factor = factor(season))
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(fill=season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(fill=season_factor)
avg_delay_month
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) +
geom_col(fill=season_factor)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(fill=season_factor)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(color=season_factor)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col()
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(fill = season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(fill = avg_delay_month$season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(color = avg_delay_month$season)
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col() +
scale_fill_brewer(palette="Set1")
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(aes(color = season))
ggplot(data = avg_delay_month, aes(x=month_factor, y=mean)) + geom_col(aes(fill = season))
# Loading dplyr
library(dplyr)
# Downloading and loading the nycflights13 library
install.packages("nycflights13")
library(nycflights13)
# Loading the flights dataset
data(flights)
# Remove na values from dep_delay and arr_delay
flights <- flights |> filter(!is.na(dep_delay) & !is.na(arr_delay))
# Creating a smaller subset of the data
delay_data <- flights |> select(month, dep_delay, arr_delay)
# Group by month
delay_month_group <- delay_data |>
group_by(month) |>
summarize(avg_dep_delay = mean(dep_delay), avg_arr_delay = mean(arr_delay))
# load ggplot2
library(ggplot2)
# Creating a line chart
ggplot(data = delay_month_group, aes(x=month)) +
geom_line(aes(y=avg_dep_delay))
# Creating bar plots
ggplot(data = delay_month_group, aes(x=month)) +
geom_col(aes(y=avg_dep_delay))
delay_month_group <- delay_month_group |>
mutate(month_factor = factor(month))
# Plot again
ggplot(data = delay_month_group, aes(x=month_factor)) +
geom_col(aes(y=avg_dep_delay))
delay_month_group <- delay_month_group |>
mutate(season =
ifelse(month %in% c(1,2,12), "Winter",
ifelse(month %in% 3:5, "Spring",
ifelse(month %in% 6:8, "Summer", "Fall")))
)
ggplot(data = delay_month_group, aes(x=month_factor)) +
geom_col(aes(y=avg_dep_delay, fill=season)) +
labs(
title="Average departure delay by month",
x = "Month",
y = "Average Delay",
fill = "Season"
)
ggplot(data = delay_month_group, aes(x=month_factor)) +
geom_col(aes(y=avg_arr_delay, fill=season)) +
labs(
title="Average arrival delay by month",
x = "Month",
y = "Average Delay",
fill = "Season"
)
